# -*- coding: utf-8 -*-
"""Введение в Python 01-11-2021

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSNuO5LNO0hIwjPkwvt5q6x2jh4NTC9R

Данные взяты с сайта https://rp5.ru/Архив_погоды_в_Москве_(ВДНХ)
 
 
Нажимаем кнопку "Выбрать в файл GZ (архив)" и формат файла Excel файлом за интересующий период (с 2016 года). Рядом появляется ссылка "Скачать". Правая кнопка мыши -> Копировать ссылку
 
Пример команды для скачивания (подставить свою ссылку):
 
```!wget -O "weather.xls.gz" "http://93.90.217.253/download/files.synop/27/27612.01.01.2016.16.08.2021.1.0.0.ru.utf8.00000000.xls.gz"```
 
Распаковка архива:
 
```!gzip -df "weather.xls.gz"```
 
Ссылка на вебинар
https://live.skillbox.ru/webinars/code/analiz-dannykh-v-data-science-znakomimsya-s-python011121/

#1. Введение в Python
"""

# Комментарий начинается со знака "решетка" и заканчивается в конце строки
# Чтобы добавить новую ячейку, нужно нажать кнопку "+Код" в левом верхнем углу, для запуска - Shift+Enter
# Ячейка выведет значение выражения в последней строке (либо значение переменной)

# Переменная - аналог x, y, z в школьных формулах - значение, которому мы дали удобное имя (главное, что оно не начиналось с цифры)
x = 5
y = 11
x + y

# Напечатать значение или результат арифметической операции и т.п. - можно с помощью функции print

# Аргументы, написанные через запятую в круглых скобках напечатаются через пробел
print('Hello, world', x+y)
# Строки (какой-то текст) обозначаются кавычками: одинарными или двойными (главное, симметричными)

# Ячейка исполняется каждый раз заново

# True/False - специальный тип данных, результат выражений сравнения (>, <, ==, >=, ...)
t = 36.6
t > 37.2

# Условные выражения - код в блоке выполнится, если результат выражения после if равен True
# Если условие не выполняется (= False), выполняется блока кода после else
# Блок = код, сдвинутый на одинаковое число отступов вправо. Отступы в начале строки - часть синтаксиса языка

if t < 37.2:
    print('Здоров')
    print('Лечить не нужно')
else:
    print('Болен')

# А что, если значение неизвестно? Например, термометр сломался.
# Специальный тип данных "ничто" (None (pure Python), NaN - not a number (pandas), NaT - not a time (pandas))
None

# Для того, чтобы писать какие-то программы, нужны списки с данными. Список записывается в квадрадных скобках через запятую
lst = [x, y, x+y, 'Hello!', None]  # 0, 1, 2, 3, 4
lst

# В списке можно получить любое значение по его номеру ("адресу") в списке. 
# Нумерация начинается с 0, номер пишется в квадратных скобках

lst[0], lst[-1], lst[2]

"""#2. Matplotlib: графики"""

# Для того, чтобы использовать какой-то функционал сложнее арифметических операций, 
# нужно в явном виде подключить пакет (библиотеку, модуль)

import matplotlib.pyplot as plt

# Эту ячейку нужно обязательно выполнить, чтобы не получить потом ошибку NameError: name 'plt' is not defined

# Список координат по оси X и Y, передаем их в функцию как аргументы
x = [1, 2, 3, 4, 5]
y = [6, 3, 9, 5, 3]

plt.plot(x, y)

# Графики можно кастомизировать (и даже приводить к ГОСТУ)

x = [1, 2, 3, 4, 5]
y = [6, 3, 9, 5, 3]


# Изменяем аргумент figsize, 20x5 дюймов
plt.figure(figsize=(20, 5))
# Добавляем лейбл, изменяем цвет
plt.plot(x, y, label='f(x)', color='red')

# Отрисовываем лейбл
plt.legend()

"""#3. Pandas: таблицы"""

# Скачивание файла (подставить свою ссылку)
!wget -O "weather.xls.gz" "http://93.90.217.253/download/files.synop/27/27612.01.01.2016.01.11.2021.1.0.0.ru.utf8.00000000.xls.gz"

# Распаковка архива
!gzip -df "weather.xls.gz"

# Подключаем библиотеку pandas для работы с таблицами (стандартный псевдоним - pd)

import pandas as pd

# Считываем Excel-таблицу в переменную data
data = pd.read_excel('weather.xls')

# Смотрим, что получилось
# первые 10 строк
data.head(10)

# Удаляем лишние комментарии (первые 6 строк)
data = pd.read_excel('weather.xls', skiprows=6)
data.head(10)

# pandas.DataFrame - таблица, сложный тип данных (формально называется "объект")
# Мало того, что мы можем передавать его как агрумент в другие функции, мы можем
# как из пакета вызывать встроенные функции ("методы") или свойства, внутренние переменные ("атрибуты")

# data.head() - метод
# data.shape - атрибут
data.shape

# Посмотрим на колонки, которые нам доступны
data.columns

# Данные хранятся а) по столбцам б) по номерам строк
# Столбец - отдельный объект типа pandas.Series
data['Местное время в Москве (ВДНХ)'][4]

data['Местное время в Москве (ВДНХ)']

# Хотим нарисовать график температуры от времени
# Для этого нужно преобразовать колонку с датами в специальный формат дат 
# (вы можете попробовать дома без преобразования и посмотреть, как все зависло)

# Сейчас там записаны строки в Российском формате - а нужно преобразовать во внутренний питоновский формат
pd.to_datetime(data['Местное время в Москве (ВДНХ)'], dayfirst=True)

# Создали новую колонку в правильном формате
data['date'] = pd.to_datetime(data['Местное время в Москве (ВДНХ)'], dayfirst=True)
# Упражнение для любознательных: попробуйте удалить dayfirst=True и посмотреть на график :)

# Добавим новую колонку в табличку

data['date'] = pd.to_datetime(data['Местное время в Москве (ВДНХ)'], dayfirst=True)

# Распечатаем график температуры

x = data['date']
y = data['T']

plt.plot(x, y)

# Нам доступно 100% данных или есть пропуски? Удаляем некорректные данные

empty_condition = data['T'].isna()
data[empty_condition]

data = data[data['T'].notna()]

data[data['T'].isna()]

# Максимум, минимум, среднее

data['T'].min(), data['T'].max(), data['T'].mean()

# Каким температурам будет подвергаться здание чаще всего?

# Гистограмма - график, который показывает, сколько раз встречалось то или иное значение
data['T'].hist()

# "95-й квантиль равен 23.7 градусам" - если температура не превыает 23.7 градусов в 95% случаев

data['T'].quantile(0.95)

# В 90% случаев температура находится в диапазоне от <-9.8> до <23.8> градусов
data['T'].quantile(0.05), data['T'].quantile(0.95)

# Что нам потребуется для обучения модели - выделение определенных диапазонов данных

# Выбираем данные по условию
condition = data['date'] < '2018-01-01'
data[condition]

condition = data['date'] < '2018-01-01'
data_short = data[condition]

x = data_short['date']
y = data_short['T']
plt.plot(x, y)





# Упражнение для самопроверки (сдавать никуда не нужно, обсуждание в ТГ-чате приветствуется)
# Приблизить график аномалии в 2017 году (например, обрезать с ноября 2016 по март 2017)
# 1) Это упражнение можно сделать скомбинировав код с вебинара
# 2) Есть много способов сделать это в 1 строчку, гуглить можно и нужно (задание со *)